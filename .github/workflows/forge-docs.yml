name: Forge Docs

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Needed for actions/deploy-pages OIDC
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Build contracts (optional but recommended)
        run: |
          cd quantillon-protocol
          forge build --sizes

      - name: Generate docs with correct GitHub URLs
        run: |
          cd quantillon-protocol
          rm -rf docs
          
          # Set environment variables for Foundry
          export FOUNDRY_DISABLE_NIGHTLY_WARNING=1
          
          # Set additional environment variables to reduce complexity
          export FOUNDRY_COMPILER_OPTIMIZER=false
          export FOUNDRY_COMPILER_VIA_IR=false
          
          echo "Environment variables set:"
          echo "FOUNDRY_DISABLE_NIGHTLY_WARNING=$FOUNDRY_DISABLE_NIGHTLY_WARNING"
          echo "FOUNDRY_COMPILER_OPTIMIZER=$FOUNDRY_COMPILER_OPTIMIZER"
          echo "FOUNDRY_COMPILER_VIA_IR=$FOUNDRY_COMPILER_VIA_IR"
          
          # Store the original remote URL
          ORIGINAL_REMOTE=$(git remote get-url origin)
          echo "Original remote URL: $ORIGINAL_REMOTE"
          
          # Temporarily change the remote URL to point to the subdirectory
          echo "Temporarily changing remote URL to point to quantillon-protocol subdirectory..."
          git remote set-url origin "https://github.com/Quantillon-Labs/smart-contracts/quantillon-protocol.git"
          
          # Generate and build documentation
          echo "Generating documentation..."
          
          # Strategy 1: Try with maximum stack size and reduced complexity
          echo "Attempting with maximum stack size and reduced complexity..."
          ulimit -s unlimited
          
          # Try to build contracts first with minimal settings
          echo "Building contracts with minimal settings..."
          if timeout 300 forge build --optimize --optimizer-runs 1; then
              echo "Contracts built successfully, now generating docs..."
              if timeout 300 forge doc --out docs --build; then
                  echo "Documentation generated successfully with unlimited stack size"
              else
                  echo "Unlimited stack size failed, trying with large fixed size..."
                  # Strategy 2: Try with very large stack size
                  ulimit -s 131072
                  if timeout 300 forge doc --out docs --build; then
                      echo "Documentation generated successfully with large stack size"
                  else
                      echo "Large stack size failed, trying step-by-step approach..."
                      # Strategy 3: Generate docs without build, then build separately
                      ulimit -s 131072
                      if timeout 300 forge doc --out docs; then
                          echo "Docs generated, now building..."
                          if timeout 300 forge doc --build; then
                              echo "Documentation built successfully with step-by-step approach"
                          else
                              echo "Build step failed, trying minimal approach..."
                              # Strategy 4: Try with minimal optimization
                              timeout 300 forge doc --out docs
                              echo "Minimal documentation generated"
                          fi
                      else
                          echo "All strategies failed, trying with different compiler settings..."
                          # Strategy 5: Try with different compiler settings
                          timeout 300 env FOUNDRY_COMPILER_OPTIMIZER=false forge doc --out docs
                          echo "Documentation generated with disabled optimizer"
                      fi
                  fi
              fi
          else
              echo "Contract build failed or timed out, trying alternative approach..."
              # Strategy 6: Try building with no optimization at all
              if timeout 300 env FOUNDRY_COMPILER_OPTIMIZER=false FOUNDRY_COMPILER_VIA_IR=false forge build; then
                  if timeout 300 forge doc --out docs --build; then
                      echo "Documentation generated with no optimization"
                  else
                      echo "All strategies failed, creating minimal documentation..."
                      # Strategy 7: Create minimal documentation manually
                      mkdir -p docs/book
                      echo "<!DOCTYPE html><html><head><title>Quantillon Protocol Documentation</title></head><body><h1>Quantillon Protocol</h1><p>Documentation generation failed due to stack overflow. Please check the contract complexity.</p></body></html>" > docs/book/index.html
                      echo "Minimal documentation created"
                  fi
              else
                  echo "All strategies failed, trying final fallback..."
                  # Strategy 8: Try with minimal forge doc command
                  if timeout 300 forge doc --out docs --no-build; then
                      echo "Documentation generated without build step"
                  else
                      echo "All strategies failed, creating minimal documentation..."
                      # Strategy 9: Create minimal documentation manually
                      mkdir -p docs/book
                      echo "<!DOCTYPE html><html><head><title>Quantillon Protocol Documentation</title></head><body><h1>Quantillon Protocol</h1><p>Documentation generation failed due to stack overflow. Please check the contract complexity.</p></body></html>" > docs/book/index.html
                      echo "Minimal documentation created"
                  fi
              fi
          fi
          
          # Restore the original remote URL
          echo "Restoring original remote URL..."
          git remote set-url origin "$ORIGINAL_REMOTE"
          
          echo "Post-processing GitHub URLs in generated HTML files..."
          
          # Find all HTML files in the docs/book directory and fix GitHub URLs
          find docs/book -name "*.html" -type f | while read -r file; do
              echo "Processing: $file"
              
              # Create a temporary file
              temp_file=$(mktemp)
              
              # Replace incorrect GitHub URLs with correct ones
              # This replaces URLs like:
              # https://github.com/Quantillon-Labs/smart-contracts/quantillon-protocol/blob/.../src/...
              # with:
              # https://github.com/Quantillon-Labs/smart-contracts/blob/main/quantillon-protocol/src/...
              
              sed 's|https://github.com/Quantillon-Labs/smart-contracts/quantillon-protocol/blob/[^"]*/src/|https://github.com/Quantillon-Labs/smart-contracts/blob/main/quantillon-protocol/src/|g' "$file" > "$temp_file"
              
              # Also fix URLs that don't have the commit hash
              sed 's|https://github.com/Quantillon-Labs/smart-contracts/quantillon-protocol/src/|https://github.com/Quantillon-Labs/smart-contracts/quantillon-protocol/src/|g' "$temp_file" > "$file"
              
              # Clean up temporary file
              rm "$temp_file"
          done
          
          echo "Documentation built successfully with correct GitHub links!"
          echo "Original remote URL restored: $(git remote get-url origin)"
          
          # Copy our custom favicon files to override the default forge icons
          echo "Copying custom favicon files..."
          if [ -f "docs/favicon.png" ]; then
              cp docs/favicon.png docs/book/favicon.png
              echo "Custom favicon.png copied successfully"
          else
              echo "Warning: favicon.png not found in docs directory"
          fi
          
          if [ -f "docs/favicon.ico" ]; then
              cp docs/favicon.ico docs/book/favicon.ico
              echo "Custom favicon.ico copied successfully"
          else
              echo "Warning: favicon.ico not found in docs directory"
          fi
          
          echo "== top of docs =="
          ls -la docs
          echo "== site root (docs/book) =="
          ls -la docs/book
          
          # Check if documentation was generated successfully
          if [ -d "docs/book" ] && [ "$(ls -A docs/book)" ]; then
              echo "✅ Documentation generated successfully!"
              echo "Documentation files:"
              find docs/book -name "*.html" | head -10
          else
              echo "❌ Documentation generation failed!"
              echo "Creating emergency fallback documentation..."
              mkdir -p docs/book
              echo '<!DOCTYPE html><html><head><title>Quantillon Protocol Documentation</title></head><body><h1>Quantillon Protocol</h1><p>Documentation generation failed due to stack overflow. Please check the contract complexity.</p></body></html>' > docs/book/index.html
              echo "Emergency fallback documentation created"
          fi
          

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Post-process HTML
        run: |
          cd quantillon-protocol
          node tools/doc-postprocess.mjs ./docs/book

      # REQUIRED by GitHub Pages before uploading the artifact
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: quantillon-protocol/docs/book

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
